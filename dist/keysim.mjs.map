{"version":3,"file":"keysim.mjs","sources":["../node_modules/dom-element-is-natively-editable/index.js","../node_modules/keycode-js/dist/keycode.esm.js","../src/keysim.js"],"sourcesContent":["export default function (element) {\n  if (\n    element.ownerDocument.designMode &&\n    element.ownerDocument.designMode.toLowerCase() === 'on'\n  ) {\n    return true\n  }\n\n  switch (element.tagName.toLowerCase()) {\n    case 'input':\n      return isEditableInput(element)\n    case 'textarea':\n      return true\n  }\n\n  if (isContentEditable(element)) {\n    return true\n  }\n\n  return false\n}\n\nfunction isContentEditable (element) {\n  if (\n    element.contentEditable &&\n    element.contentEditable.toLowerCase() === 'true'\n  ) {\n    return true\n  }\n  if (\n    element.contentEditable &&\n    element.contentEditable.toLowerCase() === 'inherit' &&\n    element.parentNode\n  ) {\n    return isContentEditable(element.parentNode)\n  }\n  return false\n}\n\nfunction isEditableInput (input) {\n  switch (input.type) {\n    case 'text':\n      return true\n    case 'email':\n      return true\n    case 'password':\n      return true\n    case 'search':\n      return true\n    case 'tel':\n      return true\n    case 'url':\n      return true\n    default:\n      return false\n  }\n}\n","// Key code constants\r\n// Available values for `KeyboardEvent.keyCode` attribute.\r\nvar KEY_CANCEL = 3;\r\nvar KEY_HELP = 6;\r\nvar KEY_BACK_SPACE = 8;\r\nvar KEY_TAB = 9;\r\nvar KEY_CLEAR = 12;\r\nvar KEY_RETURN = 13;\r\nvar KEY_SHIFT = 16;\r\nvar KEY_CONTROL = 17;\r\nvar KEY_ALT = 18;\r\nvar KEY_PAUSE = 19;\r\nvar KEY_CAPS_LOCK = 20;\r\nvar KEY_ESCAPE = 27;\r\nvar KEY_SPACE = 32;\r\nvar KEY_PAGE_UP = 33;\r\nvar KEY_PAGE_DOWN = 34;\r\nvar KEY_END = 35;\r\nvar KEY_HOME = 36;\r\nvar KEY_LEFT = 37;\r\nvar KEY_UP = 38;\r\nvar KEY_RIGHT = 39;\r\nvar KEY_DOWN = 40;\r\nvar KEY_PRINTSCREEN = 44;\r\nvar KEY_INSERT = 45;\r\nvar KEY_DELETE = 46;\r\nvar KEY_0 = 48;\r\nvar KEY_1 = 49;\r\nvar KEY_2 = 50;\r\nvar KEY_3 = 51;\r\nvar KEY_4 = 52;\r\nvar KEY_5 = 53;\r\nvar KEY_6 = 54;\r\nvar KEY_7 = 55;\r\nvar KEY_8 = 56;\r\nvar KEY_9 = 57;\r\nvar KEY_A = 65;\r\nvar KEY_B = 66;\r\nvar KEY_C = 67;\r\nvar KEY_D = 68;\r\nvar KEY_E = 69;\r\nvar KEY_F = 70;\r\nvar KEY_G = 71;\r\nvar KEY_H = 72;\r\nvar KEY_I = 73;\r\nvar KEY_J = 74;\r\nvar KEY_K = 75;\r\nvar KEY_L = 76;\r\nvar KEY_M = 77;\r\nvar KEY_N = 78;\r\nvar KEY_O = 79;\r\nvar KEY_P = 80;\r\nvar KEY_Q = 81;\r\nvar KEY_R = 82;\r\nvar KEY_S = 83;\r\nvar KEY_T = 84;\r\nvar KEY_U = 85;\r\nvar KEY_V = 86;\r\nvar KEY_W = 87;\r\nvar KEY_X = 88;\r\nvar KEY_Y = 89;\r\nvar KEY_Z = 90;\r\nvar KEY_LEFT_CMD = 91;\r\nvar KEY_RIGHT_CMD = 92;\r\nvar KEY_CONTEXT_MENU = 93;\r\nvar KEY_NUMPAD0 = 96;\r\nvar KEY_NUMPAD1 = 97;\r\nvar KEY_NUMPAD2 = 98;\r\nvar KEY_NUMPAD3 = 99;\r\nvar KEY_NUMPAD4 = 100;\r\nvar KEY_NUMPAD5 = 101;\r\nvar KEY_NUMPAD6 = 102;\r\nvar KEY_NUMPAD7 = 103;\r\nvar KEY_NUMPAD8 = 104;\r\nvar KEY_NUMPAD9 = 105;\r\nvar KEY_MULTIPLY = 106;\r\nvar KEY_ADD = 107;\r\nvar KEY_SUBTRACT = 109;\r\nvar KEY_DECIMAL = 110;\r\nvar KEY_DIVIDE = 111;\r\nvar KEY_F1 = 112;\r\nvar KEY_F2 = 113;\r\nvar KEY_F3 = 114;\r\nvar KEY_F4 = 115;\r\nvar KEY_F5 = 116;\r\nvar KEY_F6 = 117;\r\nvar KEY_F7 = 118;\r\nvar KEY_F8 = 119;\r\nvar KEY_F9 = 120;\r\nvar KEY_F10 = 121;\r\nvar KEY_F11 = 122;\r\nvar KEY_F12 = 123;\r\nvar KEY_F13 = 124;\r\nvar KEY_F14 = 125;\r\nvar KEY_F15 = 126;\r\nvar KEY_F16 = 127;\r\nvar KEY_F17 = 128;\r\nvar KEY_F18 = 129;\r\nvar KEY_F19 = 130;\r\nvar KEY_F20 = 131;\r\nvar KEY_F21 = 132;\r\nvar KEY_F22 = 133;\r\nvar KEY_F23 = 134;\r\nvar KEY_F24 = 135;\r\nvar KEY_NUM_LOCK = 144;\r\nvar KEY_SCROLL_LOCK = 145;\r\nvar KEY_SEMICOLON = 186;\r\nvar KEY_EQUALS = 187;\r\nvar KEY_COMMA = 188;\r\nvar KEY_DASH = 189;\r\nvar KEY_PERIOD = 190;\r\nvar KEY_SLASH = 191;\r\nvar KEY_BACK_QUOTE = 192;\r\nvar KEY_OPEN_BRACKET = 219;\r\nvar KEY_BACK_SLASH = 220;\r\nvar KEY_CLOSE_BRACKET = 221;\r\nvar KEY_QUOTE = 222;\r\n// Key code constants specific to firefox only.\r\nvar KEY_FIREFOX_ENTER = 14;\r\nvar KEY_FIREFOX_SEMICOLON = 59;\r\nvar KEY_FIREFOX_EQUALS = 61;\r\nvar KEY_FIREFOX_SEPARATOR = 108;\r\nvar KEY_FIREFOX_META = 224;\r\n// Key values constants\r\n// Available values for `KeyboardEvent.key` attribute.\r\nvar VALUE_CANCEL = 'Cancel';\r\nvar VALUE_HELP = 'Help';\r\nvar VALUE_BACK_SPACE = 'Backspace';\r\nvar VALUE_TAB = 'Tab';\r\nvar VALUE_CLEAR = 'Clear';\r\nvar VALUE_ENTER = 'Enter';\r\nvar VALUE_RETURN = 'Enter';\r\nvar VALUE_SHIFT = 'Shift';\r\nvar VALUE_CONTROL = 'Control';\r\nvar VALUE_ALT = 'Alt';\r\nvar VALUE_PAUSE = 'Pause';\r\nvar VALUE_CAPS_LOCK = 'CapsLock';\r\nvar VALUE_ESCAPE = 'Escape';\r\nvar VALUE_SPACE = ' ';\r\nvar VALUE_PAGE_UP = 'PageUp';\r\nvar VALUE_PAGE_DOWN = 'PageDown';\r\nvar VALUE_END = 'End';\r\nvar VALUE_HOME = 'Home';\r\nvar VALUE_LEFT = 'ArrowLeft';\r\nvar VALUE_UP = 'ArrowUp';\r\nvar VALUE_RIGHT = 'ArrowRight';\r\nvar VALUE_DOWN = 'ArrowDown';\r\nvar VALUE_PRINTSCREEN = 'PrintScreen';\r\nvar VALUE_INSERT = 'Insert';\r\nvar VALUE_DELETE = 'Delete';\r\nvar VALUE_0 = '0';\r\nvar VALUE_1 = '1';\r\nvar VALUE_2 = '2';\r\nvar VALUE_3 = '3';\r\nvar VALUE_4 = '4';\r\nvar VALUE_5 = '5';\r\nvar VALUE_6 = '6';\r\nvar VALUE_7 = '7';\r\nvar VALUE_8 = '8';\r\nvar VALUE_9 = '9';\r\nvar VALUE_A = 'a';\r\nvar VALUE_B = 'b';\r\nvar VALUE_C = 'c';\r\nvar VALUE_D = 'd';\r\nvar VALUE_E = 'e';\r\nvar VALUE_F = 'f';\r\nvar VALUE_G = 'g';\r\nvar VALUE_H = 'h';\r\nvar VALUE_I = 'i';\r\nvar VALUE_J = 'j';\r\nvar VALUE_K = 'k';\r\nvar VALUE_L = 'l';\r\nvar VALUE_M = 'm';\r\nvar VALUE_N = 'n';\r\nvar VALUE_O = 'o';\r\nvar VALUE_P = 'p';\r\nvar VALUE_Q = 'q';\r\nvar VALUE_R = 'r';\r\nvar VALUE_S = 's';\r\nvar VALUE_T = 't';\r\nvar VALUE_U = 'u';\r\nvar VALUE_V = 'v';\r\nvar VALUE_W = 'w';\r\nvar VALUE_X = 'x';\r\nvar VALUE_Y = 'y';\r\nvar VALUE_Z = 'z';\r\nvar VALUE_META = 'Meta';\r\nvar VALUE_LEFT_CMD = 'Meta';\r\nvar VALUE_RIGHT_CMD = 'Meta';\r\nvar VALUE_CONTEXT_MENU = 'ContextMenu';\r\nvar VALUE_NUMPAD0 = '0';\r\nvar VALUE_NUMPAD1 = '1';\r\nvar VALUE_NUMPAD2 = '2';\r\nvar VALUE_NUMPAD3 = '3';\r\nvar VALUE_NUMPAD4 = '4';\r\nvar VALUE_NUMPAD5 = '5';\r\nvar VALUE_NUMPAD6 = '6';\r\nvar VALUE_NUMPAD7 = '7';\r\nvar VALUE_NUMPAD8 = '8';\r\nvar VALUE_NUMPAD9 = '9';\r\nvar VALUE_MULTIPLY = '*';\r\nvar VALUE_ADD = '+';\r\nvar VALUE_SUBTRACT = '-';\r\nvar VALUE_DECIMAL = '.';\r\nvar VALUE_DIVIDE = '/';\r\nvar VALUE_F1 = 'F1';\r\nvar VALUE_F2 = 'F2';\r\nvar VALUE_F3 = 'F3';\r\nvar VALUE_F4 = 'F4';\r\nvar VALUE_F5 = 'F5';\r\nvar VALUE_F6 = 'F6';\r\nvar VALUE_F7 = 'F7';\r\nvar VALUE_F8 = 'F8';\r\nvar VALUE_F9 = 'F9';\r\nvar VALUE_F10 = 'F10';\r\nvar VALUE_F11 = 'F11';\r\nvar VALUE_F12 = 'F12';\r\nvar VALUE_F13 = 'F13';\r\nvar VALUE_F14 = 'F14';\r\nvar VALUE_F15 = 'F15';\r\nvar VALUE_F16 = 'F16';\r\nvar VALUE_F17 = 'F17';\r\nvar VALUE_F18 = 'F18';\r\nvar VALUE_F19 = 'F19';\r\nvar VALUE_F20 = 'F20';\r\nvar VALUE_F21 = 'F21';\r\nvar VALUE_F22 = 'F22';\r\nvar VALUE_F23 = 'F23';\r\nvar VALUE_F24 = 'F24';\r\nvar VALUE_NUM_LOCK = 'NumLock';\r\nvar VALUE_SCROLL_LOCK = 'ScrollLock';\r\nvar VALUE_SEMICOLON = ';';\r\nvar VALUE_EQUALS = '=';\r\nvar VALUE_COMMA = ',';\r\nvar VALUE_DASH = '-';\r\nvar VALUE_PERIOD = '.';\r\nvar VALUE_SLASH = '/';\r\nvar VALUE_BACK_QUOTE = '`';\r\nvar VALUE_OPEN_BRACKET = '[';\r\nvar VALUE_BACK_SLASH = '\\\\';\r\nvar VALUE_CLOSE_BRACKET = ']';\r\nvar VALUE_QUOTE = \"'\";\r\n// Key code constants\r\n// Available values for `KeyboardEvent.code` attribute.\r\nvar CODE_UNIDENTIFIED = 'Unidentified';\r\nvar CODE_ESCAPE = 'Escape';\r\nvar CODE_MINUS = 'Minus';\r\nvar CODE_DASH = 'Minus';\r\nvar CODE_EQUALS = 'Equal';\r\nvar CODE_BACK_SPACE = 'Backspace';\r\nvar CODE_TAB = 'Tab';\r\nvar CODE_ENTER = 'Enter';\r\nvar CODE_RETURN = 'Enter';\r\nvar CODE_SHIFT_LEFT = 'ShiftLeft';\r\nvar CODE_SHIFT_RIGHT = 'ShiftRight';\r\nvar CODE_CONTROL_LEFT = 'ControlLeft';\r\nvar CODE_CONTROL_RIGHT = 'ControlRight';\r\nvar CODE_ALT_LEFT = 'AltLeft';\r\nvar CODE_ALT_RIGHT = 'AltRight';\r\nvar CODE_PAUSE = 'Pause';\r\nvar CODE_CAPS_LOCK = 'CapsLock';\r\nvar CODE_SPACE = 'Space';\r\nvar CODE_PAGE_UP = 'PageUp';\r\nvar CODE_PAGE_DOWN = 'PageDown';\r\nvar CODE_END = 'End';\r\nvar CODE_HOME = 'Home';\r\nvar CODE_LEFT = 'ArrowLeft';\r\nvar CODE_UP = 'ArrowUp';\r\nvar CODE_RIGHT = 'ArrowRight';\r\nvar CODE_DOWN = 'ArrowDown';\r\nvar CODE_PRINTSCREEN = 'PrintScreen';\r\nvar CODE_INSERT = 'Insert';\r\nvar CODE_DELETE = 'Delete';\r\nvar CODE_0 = 'Digit0';\r\nvar CODE_1 = 'Digit1';\r\nvar CODE_2 = 'Digit2';\r\nvar CODE_3 = 'Digit3';\r\nvar CODE_4 = 'Digit4';\r\nvar CODE_5 = 'Digit5';\r\nvar CODE_6 = 'Digit6';\r\nvar CODE_7 = 'Digit7';\r\nvar CODE_8 = 'Digit8';\r\nvar CODE_9 = 'Digit9';\r\nvar CODE_A = 'KeyA';\r\nvar CODE_B = 'KeyB';\r\nvar CODE_C = 'KeyC';\r\nvar CODE_D = 'KeyD';\r\nvar CODE_E = 'KeyE';\r\nvar CODE_F = 'KeyF';\r\nvar CODE_G = 'KeyG';\r\nvar CODE_H = 'KeyH';\r\nvar CODE_I = 'KeyI';\r\nvar CODE_J = 'KeyJ';\r\nvar CODE_K = 'KeyK';\r\nvar CODE_L = 'KeyL';\r\nvar CODE_M = 'KeyM';\r\nvar CODE_N = 'KeyN';\r\nvar CODE_O = 'KeyO';\r\nvar CODE_P = 'KeyP';\r\nvar CODE_Q = 'KeyQ';\r\nvar CODE_R = 'KeyR';\r\nvar CODE_S = 'KeyS';\r\nvar CODE_T = 'KeyT';\r\nvar CODE_U = 'KeyU';\r\nvar CODE_V = 'KeyV';\r\nvar CODE_W = 'KeyW';\r\nvar CODE_X = 'KeyX';\r\nvar CODE_Y = 'KeyY';\r\nvar CODE_Z = 'KeyZ';\r\nvar CODE_META_LEFT = 'MetaLeft';\r\nvar CODE_OS_LEFT = 'OSLeft';\r\nvar CODE_META_RIGHT = 'MetaRight';\r\nvar CODE_OS_RIGHT = 'OSRight';\r\nvar CODE_CONTEXT_MENU = 'ContextMenu';\r\nvar CODE_NUMPAD0 = 'Numpad0';\r\nvar CODE_NUMPAD1 = 'Numpad1';\r\nvar CODE_NUMPAD2 = 'Numpad2';\r\nvar CODE_NUMPAD3 = 'Numpad3';\r\nvar CODE_NUMPAD4 = 'Numpad4';\r\nvar CODE_NUMPAD5 = 'Numpad5';\r\nvar CODE_NUMPAD6 = 'Numpad6';\r\nvar CODE_NUMPAD7 = 'Numpad7';\r\nvar CODE_NUMPAD8 = 'Numpad8';\r\nvar CODE_NUMPAD9 = 'Numpad9';\r\nvar CODE_NUMPAD_MULTIPLY = 'NumpadMultiply';\r\nvar CODE_NUMPAD_ADD = 'NumpadAdd';\r\nvar CODE_NUMPAD_SUBTRACT = 'NumpadSubtract';\r\nvar CODE_NUMPAD_DECIMAL = 'NumpadDecimal';\r\nvar CODE_NUMPAD_DIVIDE = 'NumpadDivide';\r\nvar CODE_NUMPAD_ENTER = 'NumpadEnter';\r\nvar CODE_F1 = 'F1';\r\nvar CODE_F2 = 'F2';\r\nvar CODE_F3 = 'F3';\r\nvar CODE_F4 = 'F4';\r\nvar CODE_F5 = 'F5';\r\nvar CODE_F6 = 'F6';\r\nvar CODE_F7 = 'F7';\r\nvar CODE_F8 = 'F8';\r\nvar CODE_F9 = 'F9';\r\nvar CODE_F10 = 'F10';\r\nvar CODE_F11 = 'F11';\r\nvar CODE_F12 = 'F12';\r\nvar CODE_F13 = 'F13';\r\nvar CODE_F14 = 'F14';\r\nvar CODE_F15 = 'F15';\r\nvar CODE_F16 = 'F16';\r\nvar CODE_F17 = 'F17';\r\nvar CODE_F18 = 'F18';\r\nvar CODE_F19 = 'F19';\r\nvar CODE_F20 = 'F20';\r\nvar CODE_F21 = 'F21';\r\nvar CODE_F22 = 'F22';\r\nvar CODE_F23 = 'F23';\r\nvar CODE_F24 = 'F24';\r\nvar CODE_NUM_LOCK = 'NumLock';\r\nvar CODE_SCROLL_LOCK = 'ScrollLock';\r\nvar CODE_SEMICOLON = 'Semicolon';\r\nvar CODE_COMMA = 'Comma';\r\nvar CODE_PERIOD = 'Period';\r\nvar CODE_SLASH = 'Slash';\r\nvar CODE_BACK_QUOTE = 'Backquote';\r\nvar CODE_OPEN_BRACKET = 'BracketLeft';\r\nvar CODE_BACK_SLASH = 'Backslash';\r\nvar CODE_CLOSE_BRACKET = 'BracketRight';\r\nvar CODE_QUOTE = 'Quote';\n\nexport { CODE_0, CODE_1, CODE_2, CODE_3, CODE_4, CODE_5, CODE_6, CODE_7, CODE_8, CODE_9, CODE_A, CODE_ALT_LEFT, CODE_ALT_RIGHT, CODE_B, CODE_BACK_QUOTE, CODE_BACK_SLASH, CODE_BACK_SPACE, CODE_C, CODE_CAPS_LOCK, CODE_CLOSE_BRACKET, CODE_COMMA, CODE_CONTEXT_MENU, CODE_CONTROL_LEFT, CODE_CONTROL_RIGHT, CODE_D, CODE_DASH, CODE_DELETE, CODE_DOWN, CODE_E, CODE_END, CODE_ENTER, CODE_EQUALS, CODE_ESCAPE, CODE_F, CODE_F1, CODE_F10, CODE_F11, CODE_F12, CODE_F13, CODE_F14, CODE_F15, CODE_F16, CODE_F17, CODE_F18, CODE_F19, CODE_F2, CODE_F20, CODE_F21, CODE_F22, CODE_F23, CODE_F24, CODE_F3, CODE_F4, CODE_F5, CODE_F6, CODE_F7, CODE_F8, CODE_F9, CODE_G, CODE_H, CODE_HOME, CODE_I, CODE_INSERT, CODE_J, CODE_K, CODE_L, CODE_LEFT, CODE_M, CODE_META_LEFT, CODE_META_RIGHT, CODE_MINUS, CODE_N, CODE_NUMPAD0, CODE_NUMPAD1, CODE_NUMPAD2, CODE_NUMPAD3, CODE_NUMPAD4, CODE_NUMPAD5, CODE_NUMPAD6, CODE_NUMPAD7, CODE_NUMPAD8, CODE_NUMPAD9, CODE_NUMPAD_ADD, CODE_NUMPAD_DECIMAL, CODE_NUMPAD_DIVIDE, CODE_NUMPAD_ENTER, CODE_NUMPAD_MULTIPLY, CODE_NUMPAD_SUBTRACT, CODE_NUM_LOCK, CODE_O, CODE_OPEN_BRACKET, CODE_OS_LEFT, CODE_OS_RIGHT, CODE_P, CODE_PAGE_DOWN, CODE_PAGE_UP, CODE_PAUSE, CODE_PERIOD, CODE_PRINTSCREEN, CODE_Q, CODE_QUOTE, CODE_R, CODE_RETURN, CODE_RIGHT, CODE_S, CODE_SCROLL_LOCK, CODE_SEMICOLON, CODE_SHIFT_LEFT, CODE_SHIFT_RIGHT, CODE_SLASH, CODE_SPACE, CODE_T, CODE_TAB, CODE_U, CODE_UNIDENTIFIED, CODE_UP, CODE_V, CODE_W, CODE_X, CODE_Y, CODE_Z, KEY_0, KEY_1, KEY_2, KEY_3, KEY_4, KEY_5, KEY_6, KEY_7, KEY_8, KEY_9, KEY_A, KEY_ADD, KEY_ALT, KEY_B, KEY_BACK_QUOTE, KEY_BACK_SLASH, KEY_BACK_SPACE, KEY_C, KEY_CANCEL, KEY_CAPS_LOCK, KEY_CLEAR, KEY_CLOSE_BRACKET, KEY_COMMA, KEY_CONTEXT_MENU, KEY_CONTROL, KEY_D, KEY_DASH, KEY_DECIMAL, KEY_DELETE, KEY_DIVIDE, KEY_DOWN, KEY_E, KEY_END, KEY_EQUALS, KEY_ESCAPE, KEY_F, KEY_F1, KEY_F10, KEY_F11, KEY_F12, KEY_F13, KEY_F14, KEY_F15, KEY_F16, KEY_F17, KEY_F18, KEY_F19, KEY_F2, KEY_F20, KEY_F21, KEY_F22, KEY_F23, KEY_F24, KEY_F3, KEY_F4, KEY_F5, KEY_F6, KEY_F7, KEY_F8, KEY_F9, KEY_FIREFOX_ENTER, KEY_FIREFOX_EQUALS, KEY_FIREFOX_META, KEY_FIREFOX_SEMICOLON, KEY_FIREFOX_SEPARATOR, KEY_G, KEY_H, KEY_HELP, KEY_HOME, KEY_I, KEY_INSERT, KEY_J, KEY_K, KEY_L, KEY_LEFT, KEY_LEFT_CMD, KEY_M, KEY_MULTIPLY, KEY_N, KEY_NUMPAD0, KEY_NUMPAD1, KEY_NUMPAD2, KEY_NUMPAD3, KEY_NUMPAD4, KEY_NUMPAD5, KEY_NUMPAD6, KEY_NUMPAD7, KEY_NUMPAD8, KEY_NUMPAD9, KEY_NUM_LOCK, KEY_O, KEY_OPEN_BRACKET, KEY_P, KEY_PAGE_DOWN, KEY_PAGE_UP, KEY_PAUSE, KEY_PERIOD, KEY_PRINTSCREEN, KEY_Q, KEY_QUOTE, KEY_R, KEY_RETURN, KEY_RIGHT, KEY_RIGHT_CMD, KEY_S, KEY_SCROLL_LOCK, KEY_SEMICOLON, KEY_SHIFT, KEY_SLASH, KEY_SPACE, KEY_SUBTRACT, KEY_T, KEY_TAB, KEY_U, KEY_UP, KEY_V, KEY_W, KEY_X, KEY_Y, KEY_Z, VALUE_0, VALUE_1, VALUE_2, VALUE_3, VALUE_4, VALUE_5, VALUE_6, VALUE_7, VALUE_8, VALUE_9, VALUE_A, VALUE_ADD, VALUE_ALT, VALUE_B, VALUE_BACK_QUOTE, VALUE_BACK_SLASH, VALUE_BACK_SPACE, VALUE_C, VALUE_CANCEL, VALUE_CAPS_LOCK, VALUE_CLEAR, VALUE_CLOSE_BRACKET, VALUE_COMMA, VALUE_CONTEXT_MENU, VALUE_CONTROL, VALUE_D, VALUE_DASH, VALUE_DECIMAL, VALUE_DELETE, VALUE_DIVIDE, VALUE_DOWN, VALUE_E, VALUE_END, VALUE_ENTER, VALUE_EQUALS, VALUE_ESCAPE, VALUE_F, VALUE_F1, VALUE_F10, VALUE_F11, VALUE_F12, VALUE_F13, VALUE_F14, VALUE_F15, VALUE_F16, VALUE_F17, VALUE_F18, VALUE_F19, VALUE_F2, VALUE_F20, VALUE_F21, VALUE_F22, VALUE_F23, VALUE_F24, VALUE_F3, VALUE_F4, VALUE_F5, VALUE_F6, VALUE_F7, VALUE_F8, VALUE_F9, VALUE_G, VALUE_H, VALUE_HELP, VALUE_HOME, VALUE_I, VALUE_INSERT, VALUE_J, VALUE_K, VALUE_L, VALUE_LEFT, VALUE_LEFT_CMD, VALUE_M, VALUE_META, VALUE_MULTIPLY, VALUE_N, VALUE_NUMPAD0, VALUE_NUMPAD1, VALUE_NUMPAD2, VALUE_NUMPAD3, VALUE_NUMPAD4, VALUE_NUMPAD5, VALUE_NUMPAD6, VALUE_NUMPAD7, VALUE_NUMPAD8, VALUE_NUMPAD9, VALUE_NUM_LOCK, VALUE_O, VALUE_OPEN_BRACKET, VALUE_P, VALUE_PAGE_DOWN, VALUE_PAGE_UP, VALUE_PAUSE, VALUE_PERIOD, VALUE_PRINTSCREEN, VALUE_Q, VALUE_QUOTE, VALUE_R, VALUE_RETURN, VALUE_RIGHT, VALUE_RIGHT_CMD, VALUE_S, VALUE_SCROLL_LOCK, VALUE_SEMICOLON, VALUE_SHIFT, VALUE_SLASH, VALUE_SPACE, VALUE_SUBTRACT, VALUE_T, VALUE_TAB, VALUE_U, VALUE_UP, VALUE_V, VALUE_W, VALUE_X, VALUE_Y, VALUE_Z };\n","import isEditable from 'dom-element-is-natively-editable';\nimport {VALUE_CONTROL, CODE_CONTROL_LEFT, VALUE_0, VALUE_V, CODE_V} from 'keycode-js';\n\nconst CTRL = 1 << 0;\nconst META = 1 << 1;\nconst ALT = 1 << 2;\nconst SHIFT = 1 << 3;\n\n// Key Events\nexport const KeyEvents = {\n  DOWN: 1 << 0,\n  PRESS: 1 << 1,\n  UP: 1 << 2,\n  INPUT: 1 << 3\n};\nKeyEvents.ALL =\n  KeyEvents.DOWN | KeyEvents.PRESS | KeyEvents.UP | KeyEvents.INPUT;\n\n/**\n * Represents a keystroke, or a single key code with a set of active modifiers.\n */\nexport class Keystroke {\n  /**\n   * @param {number} modifiers A bitmask formed by CTRL, META, ALT, and SHIFT.\n   * @param {number} keyCode\n   */\n  constructor(modifiers, keyCode, key, code) {\n    this.modifiers = modifiers;\n    this.ctrlKey = !!(modifiers & CTRL);\n    this.metaKey = !!(modifiers & META);\n    this.altKey = !!(modifiers & ALT);\n    this.shiftKey = !!(modifiers & SHIFT);\n    this.keyCode = keyCode;\n    this.key = key || '';\n    this.code = code || '';\n  }\n\n  /**\n   * Gets the bitmask value for the \"control\" modifier.\n   *\n   * @type {number}\n   */\n  static CTRL = CTRL;\n\n  /**\n   * Gets the bitmask value for the \"meta\" modifier.\n   *\n   * @return {number}\n   */\n  static META = META;\n\n  /**\n   * Gets the bitmask value for the \"alt\" modifier.\n   *\n   * @return {number}\n   */\n  static ALT = ALT;\n\n  /**\n   * Gets the bitmask value for the \"shift\" modifier.\n   *\n   * @return {number}\n   */\n  static SHIFT = SHIFT;\n}\n\n/**\n * @typedef {\"keydown\" | \"keypress\" | \"keyup\" | \"textInput\" | \"input\"} KeyEventsName\n */\n\n/**\n * Simulates a keyboard with a particular key-to-character and key-to-action\n * mapping. Use `US_ENGLISH` to get a pre-configured keyboard.\n */\nexport class Keyboard {\n  /**\n   * @param {Object.<number, Keystroke>} charCodeKeyCodeMap\n   * @param {Object.<string, number>} actionKeyCodeMap\n   */\n  constructor(charCodeKeyCodeMap, actionKeyCodeMap) {\n    this._charCodeKeyCodeMap = charCodeKeyCodeMap;\n    this._actionKeyCodeMap = actionKeyCodeMap;\n  }\n\n  /**\n   * Determines the character code generated by pressing the given keystroke.\n   *\n   * @param {Keystroke} keystroke\n   * @return {?number}\n   */\n  charCodeForKeystroke(keystroke) {\n    let map = this._charCodeKeyCodeMap;\n    for (let charCode in map) {\n      if (Object.prototype.hasOwnProperty.call(map, charCode)) {\n        let keystrokeForCharCode = map[charCode];\n        if (\n          keystroke.keyCode === keystrokeForCharCode.keyCode &&\n          keystroke.modifiers === keystrokeForCharCode.modifiers\n        ) {\n          return parseInt(charCode, 10);\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Creates an event ready for dispatching onto the given target.\n   *\n   * @param {KeyEventsName} type\n   * @param {Keystroke} keystroke\n   * @param {HTMLElement} target\n   * @return {Event}\n   */\n  createEventFromKeystroke(type, keystroke, target) {\n    const document = target.ownerDocument;\n    const window = document.defaultView;\n    const Event = window.Event;\n\n    let event;\n\n    try {\n      event = new Event(type);\n    } catch (e) {\n      event = document.createEvent('UIEvents');\n    }\n\n    event.initEvent(type, true, true);\n\n    switch (type) {\n      case 'textInput':\n      case 'input':\n        event.data = String.fromCharCode(this.charCodeForKeystroke(keystroke));\n        break;\n\n      case 'keydown':\n      case 'keypress':\n      case 'keyup':\n        event.shiftKey = keystroke.shiftKey;\n        event.altKey = keystroke.altKey;\n        event.metaKey = keystroke.metaKey;\n        event.ctrlKey = keystroke.ctrlKey;\n        event.keyCode =\n          type === 'keypress'\n            ? this.charCodeForKeystroke(keystroke)\n            : keystroke.keyCode;\n        event.charCode = type === 'keypress' ? event.keyCode : 0;\n        event.which = event.keyCode;\n        event.key = keystroke.key;\n        event.code = keystroke.code;\n        break;\n    }\n\n    return event;\n  }\n\n  /**\n   * Fires the correct sequence of events on the given target as if the given\n   * action was undertaken by a human.\n   *\n   * @param {string} action e.g. \"alt+shift+left\" or \"backspace\"\n   * @param {HTMLElement} target\n   */\n  dispatchEventsForAction(action, target) {\n    const keystroke = this.keystrokeForAction(action);\n    this.dispatchEventsForKeystroke(keystroke, target);\n  }\n\n  /**\n   * Fires the correct sequence of events on the given target as if the given\n   * input had been typed by a human.\n   *\n   * @param {string} input\n   * @param {HTMLElement} target\n   */\n  dispatchEventsForInput(input, target) {\n    let currentModifierState = 0;\n    for (let i = 0, length = input.length; i < length; i++) {\n      const keystroke = this.keystrokeForCharCode(input.charCodeAt(i));\n      this.dispatchModifierStateTransition(\n        target,\n        currentModifierState,\n        keystroke.modifiers\n      );\n      this.dispatchEventsForKeystroke(keystroke, target, false);\n      currentModifierState = keystroke.modifiers;\n    }\n    this.dispatchModifierStateTransition(target, currentModifierState, 0);\n  }\n\n  /**\n   * Fires the correct sequence of events on the given target as if the given\n   * keystroke was performed by a human. When simulating, for example, typing\n   * the letter \"A\" (assuming a U.S. English keyboard) then the sequence will\n   * look like this:\n   *\n   *   keydown   keyCode=16 (SHIFT) charCode=0      shiftKey=true\n   *   keydown   keyCode=65 (A)     charCode=0      shiftKey=true\n   *   keypress  keyCode=65 (A)     charCode=65 (A) shiftKey=true\n   *   textInput data=A\n   *   input     data=A\n   *   keyup     keyCode=65 (A)     charCode=0      shiftKey=true\n   *   keyup     keyCode=16 (SHIFT) charCode=0      shiftKey=false\n   *\n   * If the keystroke would not cause a character to be input, such as when\n   * pressing alt+shift+left, the sequence looks like this:\n   *\n   *   keydown   keyCode=16 (SHIFT) charCode=0 altKey=false shiftKey=true\n   *   keydown   keyCode=18 (ALT)   charCode=0 altKey=true  shiftKey=true\n   *   keydown   keyCode=37 (LEFT)  charCode=0 altKey=true  shiftKey=true\n   *   keyup     keyCode=37 (LEFT)  charCode=0 altKey=true  shiftKey=true\n   *   keyup     keyCode=18 (ALT)   charCode=0 altKey=false shiftKey=true\n   *   keyup     keyCode=16 (SHIFT) charCode=0 altKey=false shiftKey=false\n   *\n   * To disable handling of modifier keys, call with `transitionModifers` set\n   * to false. Doing so will omit the keydown and keyup events associated with\n   * shift, ctrl, alt, and meta keys surrounding the actual keystroke.\n   *\n   * @param {Keystroke} keystroke\n   * @param {HTMLElement} target\n   * @param {boolean=} transitionModifiers\n   * @param {number} events\n   */\n  dispatchEventsForKeystroke(\n    keystroke,\n    target,\n    transitionModifiers = true,\n    events = KeyEvents.ALL\n  ) {\n    if (transitionModifiers) {\n      this.dispatchModifierStateTransition(\n        target,\n        0,\n        keystroke.modifiers,\n        events\n      );\n    }\n\n    let keydownEvent;\n    if (events & KeyEvents.DOWN) {\n      keydownEvent = this.createEventFromKeystroke(\n        'keydown',\n        keystroke,\n        target\n      );\n    }\n\n    if (\n      keydownEvent &&\n      target.dispatchEvent(keydownEvent) &&\n      this.targetCanReceiveTextInput(target)\n    ) {\n      let keypressEvent;\n      if (events & KeyEvents.PRESS) {\n        keypressEvent = this.createEventFromKeystroke(\n          'keypress',\n          keystroke,\n          target\n        );\n      }\n      if (\n        keypressEvent &&\n        keypressEvent.charCode &&\n        target.dispatchEvent(keypressEvent)\n      ) {\n        if (events & KeyEvents.INPUT) {\n          const textinputEvent = this.createEventFromKeystroke(\n            'textInput',\n            keystroke,\n            target\n          );\n          target.dispatchEvent(textinputEvent);\n\n          const inputEvent = this.createEventFromKeystroke(\n            'input',\n            keystroke,\n            target\n          );\n          target.dispatchEvent(inputEvent);\n        }\n      }\n    }\n\n    if (events & KeyEvents.UP) {\n      const keyupEvent = this.createEventFromKeystroke(\n        'keyup',\n        keystroke,\n        target\n      );\n      target.dispatchEvent(keyupEvent);\n    }\n\n    if (transitionModifiers) {\n      this.dispatchModifierStateTransition(target, keystroke.modifiers, 0);\n    }\n  }\n\n  /**\n   * Transitions from one modifier state to another by dispatching key events.\n   *\n   * @param {EventTarget} target\n   * @param {number} fromModifierState\n   * @param {number} toModifierState\n   * @param {number} events\n   * @private\n   */\n  dispatchModifierStateTransition(\n    target,\n    fromModifierState,\n    toModifierState,\n    events = KeyEvents.ALL\n  ) {\n    let currentModifierState = fromModifierState;\n    let didHaveMeta = (fromModifierState & META) === META;\n    let willHaveMeta = (toModifierState & META) === META;\n    let didHaveCtrl = (fromModifierState & CTRL) === CTRL;\n    let willHaveCtrl = (toModifierState & CTRL) === CTRL;\n    let didHaveShift = (fromModifierState & SHIFT) === SHIFT;\n    let willHaveShift = (toModifierState & SHIFT) === SHIFT;\n    let didHaveAlt = (fromModifierState & ALT) === ALT;\n    let willHaveAlt = (toModifierState & ALT) === ALT;\n\n    const includeKeyUp = events & KeyEvents.UP;\n    const includeKeyDown = events & KeyEvents.DOWN;\n\n    if (includeKeyUp && didHaveMeta === true && willHaveMeta === false) {\n      // Release the meta key.\n      currentModifierState &= ~META;\n      target.dispatchEvent(\n        this.createEventFromKeystroke(\n          'keyup',\n          new Keystroke(currentModifierState, this._actionKeyCodeMap.META),\n          target\n        )\n      );\n    }\n\n    if (includeKeyUp && didHaveCtrl === true && willHaveCtrl === false) {\n      // Release the ctrl key.\n      currentModifierState &= ~CTRL;\n      target.dispatchEvent(\n        this.createEventFromKeystroke(\n          'keyup',\n          new Keystroke(currentModifierState, this._actionKeyCodeMap.CTRL, VALUE_CONTROL, CODE_CONTROL_LEFT),\n          target\n        )\n      );\n    }\n\n    if (includeKeyUp && didHaveShift === true && willHaveShift === false) {\n      // Release the shift key.\n      currentModifierState &= ~SHIFT;\n      target.dispatchEvent(\n        this.createEventFromKeystroke(\n          'keyup',\n          new Keystroke(currentModifierState, this._actionKeyCodeMap.SHIFT),\n          target\n        )\n      );\n    }\n\n    if (includeKeyUp && didHaveAlt === true && willHaveAlt === false) {\n      // Release the alt key.\n      currentModifierState &= ~ALT;\n      target.dispatchEvent(\n        this.createEventFromKeystroke(\n          'keyup',\n          new Keystroke(currentModifierState, this._actionKeyCodeMap.ALT),\n          target\n        )\n      );\n    }\n\n    if (includeKeyDown && didHaveMeta === false && willHaveMeta === true) {\n      // Press the meta key.\n      currentModifierState |= META;\n      target.dispatchEvent(\n        this.createEventFromKeystroke(\n          'keydown',\n          new Keystroke(currentModifierState, this._actionKeyCodeMap.META),\n          target\n        )\n      );\n    }\n\n    if (includeKeyDown && didHaveCtrl === false && willHaveCtrl === true) {\n      // Press the ctrl key.\n      currentModifierState |= CTRL;\n      target.dispatchEvent(\n        this.createEventFromKeystroke(\n          'keydown',\n          new Keystroke(currentModifierState, this._actionKeyCodeMap.CTRL, VALUE_CONTROL, CODE_CONTROL_LEFT),\n          target\n        )\n      );\n    }\n\n    if (includeKeyDown && didHaveShift === false && willHaveShift === true) {\n      // Press the shift key.\n      currentModifierState |= SHIFT;\n      target.dispatchEvent(\n        this.createEventFromKeystroke(\n          'keydown',\n          new Keystroke(currentModifierState, this._actionKeyCodeMap.SHIFT),\n          target\n        )\n      );\n    }\n\n    if (includeKeyDown && didHaveAlt === false && willHaveAlt === true) {\n      // Press the alt key.\n      currentModifierState |= ALT;\n      target.dispatchEvent(\n        this.createEventFromKeystroke(\n          'keydown',\n          new Keystroke(currentModifierState, this._actionKeyCodeMap.ALT),\n          target\n        )\n      );\n    }\n\n    if (currentModifierState !== toModifierState) {\n      throw new Error(\n        `internal error, expected modifier state: ${toModifierState}` +\n        `, got: ${currentModifierState}`\n      );\n    }\n  }\n\n  /**\n   * Returns the keystroke associated with the given action.\n   *\n   * @param {string} action\n   * @return {?Keystroke}\n   */\n  keystrokeForAction(action) {\n    let keyCode = null, code = null, key = null;\n    let modifiers = 0;\n\n    let parts = action.split('+');\n    let lastPart = parts.pop();\n\n    parts.forEach(part => {\n      switch (part.toUpperCase()) {\n        case 'CTRL':\n          modifiers |= CTRL;\n          break;\n        case 'META':\n          modifiers |= META;\n          break;\n        case 'ALT':\n          modifiers |= ALT;\n          break;\n        case 'SHIFT':\n          modifiers |= SHIFT;\n          break;\n        default:\n          throw new Error(`in \"${action}\", invalid modifier: ${part}`);\n      }\n    });\n\n    if (lastPart.toUpperCase() in this._actionKeyCodeMap) {\n      keyCode = this._actionKeyCodeMap[lastPart.toUpperCase()];\n    } else if (lastPart.length === 1) {\n      let lastPartKeystroke = this.keystrokeForCharCode(lastPart.charCodeAt(0));\n      modifiers |= lastPartKeystroke.modifiers;\n      keyCode = lastPartKeystroke.keyCode;\n      key = lastPartKeystroke.key;\n      code = lastPartKeystroke.code;\n    } else {\n      throw new Error(`in \"${action}\", invalid action: ${lastPart}`);\n    }\n\n    return new Keystroke(modifiers, keyCode, key, code);\n  }\n\n  /**\n   * Gets the keystroke used to generate the given character code.\n   *\n   * @param {number} charCode\n   * @return {?Keystroke}\n   */\n  keystrokeForCharCode(charCode) {\n    return this._charCodeKeyCodeMap[charCode] || null;\n  }\n\n  /**\n   * @param {EventTarget} target\n   * @private\n   */\n  targetCanReceiveTextInput(target) {\n    if (!target) {\n      return false;\n    }\n\n    return isEditable(target);\n  }\n}\n\nconst US_ENGLISH_CHARCODE_KEYCODE_MAP = {\n  32: new Keystroke(0, 32), // <space>\n  33: new Keystroke(SHIFT, 49), // !\n  34: new Keystroke(SHIFT, 222), // \"\n  35: new Keystroke(SHIFT, 51), // #\n  36: new Keystroke(SHIFT, 52), // $\n  37: new Keystroke(SHIFT, 53), // %\n  38: new Keystroke(SHIFT, 55), // &\n  39: new Keystroke(0, 222), // '\n  40: new Keystroke(SHIFT, 57), // (\n  41: new Keystroke(SHIFT, 48), // )\n  42: new Keystroke(SHIFT, 56), // *\n  43: new Keystroke(SHIFT, 187), // +\n  44: new Keystroke(0, 188), // ,\n  45: new Keystroke(0, 189), // -\n  46: new Keystroke(0, 190), // .\n  47: new Keystroke(0, 191), // /\n  48: new Keystroke(0, 48), // 0\n  49: new Keystroke(0, 49), // 1\n  50: new Keystroke(0, 50), // 2\n  51: new Keystroke(0, 51), // 3\n  52: new Keystroke(0, 52), // 4\n  53: new Keystroke(0, 53), // 5\n  54: new Keystroke(0, 54), // 6\n  55: new Keystroke(0, 55), // 7\n  56: new Keystroke(0, 56), // 8\n  57: new Keystroke(0, 57), // 9\n  58: new Keystroke(SHIFT, 186), // :\n  59: new Keystroke(0, 186), // ;\n  60: new Keystroke(SHIFT, 188), // <\n  61: new Keystroke(0, 187), // =\n  62: new Keystroke(SHIFT, 190), // >\n  63: new Keystroke(SHIFT, 191), // ?\n  64: new Keystroke(SHIFT, 50), // @\n  65: new Keystroke(SHIFT, 65), // A\n  66: new Keystroke(SHIFT, 66), // B\n  67: new Keystroke(SHIFT, 67), // C\n  68: new Keystroke(SHIFT, 68), // D\n  69: new Keystroke(SHIFT, 69), // E\n  70: new Keystroke(SHIFT, 70), // F\n  71: new Keystroke(SHIFT, 71), // G\n  72: new Keystroke(SHIFT, 72), // H\n  73: new Keystroke(SHIFT, 73), // I\n  74: new Keystroke(SHIFT, 74), // J\n  75: new Keystroke(SHIFT, 75), // K\n  76: new Keystroke(SHIFT, 76), // L\n  77: new Keystroke(SHIFT, 77), // M\n  78: new Keystroke(SHIFT, 78), // N\n  79: new Keystroke(SHIFT, 79), // O\n  80: new Keystroke(SHIFT, 80), // P\n  81: new Keystroke(SHIFT, 81), // Q\n  82: new Keystroke(SHIFT, 82), // R\n  83: new Keystroke(SHIFT, 83), // S\n  84: new Keystroke(SHIFT, 84), // T\n  85: new Keystroke(SHIFT, 85), // U\n  86: new Keystroke(SHIFT, 86), // V\n  87: new Keystroke(SHIFT, 87), // W\n  88: new Keystroke(SHIFT, 88), // X\n  89: new Keystroke(SHIFT, 89), // Y\n  90: new Keystroke(SHIFT, 90), // Z\n  91: new Keystroke(0, 219), // [\n  92: new Keystroke(0, 220), // \\\n  93: new Keystroke(0, 221), // ]\n  94: new Keystroke(SHIFT, 54), // ^\n  95: new Keystroke(SHIFT, 189), // _\n  96: new Keystroke(0, 192), // `\n  97: new Keystroke(0, 65), // a\n  98: new Keystroke(0, 66), // b\n  99: new Keystroke(0, 67), // c\n  100: new Keystroke(0, 68), // d\n  101: new Keystroke(0, 69), // e\n  102: new Keystroke(0, 70), // f\n  103: new Keystroke(0, 71), // g\n  104: new Keystroke(0, 72), // h\n  105: new Keystroke(0, 73), // i\n  106: new Keystroke(0, 74), // j\n  107: new Keystroke(0, 75), // k\n  108: new Keystroke(0, 76), // l\n  109: new Keystroke(0, 77), // m\n  110: new Keystroke(0, 78), // n\n  111: new Keystroke(0, 79), // o\n  112: new Keystroke(0, 80), // p\n  113: new Keystroke(0, 81), // q\n  114: new Keystroke(0, 82), // r\n  115: new Keystroke(0, 83), // s\n  116: new Keystroke(0, 84), // t\n  117: new Keystroke(0, 85), // u\n  118: new Keystroke(0, 86, VALUE_V, CODE_V), // v\n  119: new Keystroke(0, 87), // w\n  120: new Keystroke(0, 88), // x\n  121: new Keystroke(0, 89), // y\n  122: new Keystroke(0, 90), // z\n  123: new Keystroke(SHIFT, 219), // {\n  124: new Keystroke(SHIFT, 220), // |\n  125: new Keystroke(SHIFT, 221), // }\n  126: new Keystroke(SHIFT, 192) // ~\n};\n\nconst US_ENGLISH_ACTION_KEYCODE_MAP = {\n  BACKSPACE: 8,\n  TAB: 9,\n  ENTER: 13,\n  SHIFT: 16,\n  CTRL: 17,\n  ALT: 18,\n  PAUSE: 19,\n  CAPSLOCK: 20,\n  ESCAPE: 27,\n  PAGEUP: 33,\n  PAGEDOWN: 34,\n  END: 35,\n  HOME: 36,\n  LEFT: 37,\n  UP: 38,\n  RIGHT: 39,\n  DOWN: 40,\n  INSERT: 45,\n  DELETE: 46,\n  META: 91,\n  F1: 112,\n  F2: 113,\n  F3: 114,\n  F4: 115,\n  F5: 116,\n  F6: 117,\n  F7: 118,\n  F8: 119,\n  F9: 120,\n  F10: 121,\n  F11: 122,\n  F12: 123\n};\n\n/**\n * Gets a keyboard instance configured as a U.S. English keyboard would be.\n *\n * @return {Keyboard}\n */\nKeyboard.US_ENGLISH = new Keyboard(\n  US_ENGLISH_CHARCODE_KEYCODE_MAP,\n  US_ENGLISH_ACTION_KEYCODE_MAP\n);\n"],"names":["element","ownerDocument","designMode","toLowerCase","tagName","isEditableInput","isContentEditable","contentEditable","parentNode","input","type","VALUE_CONTROL","VALUE_V","CODE_CONTROL_LEFT","CODE_V","CTRL","META","ALT","SHIFT","KeyEvents","ALL","DOWN","PRESS","UP","INPUT","Keystroke","modifiers","keyCode","key","code","ctrlKey","metaKey","altKey","shiftKey","Keyboard","charCodeKeyCodeMap","actionKeyCodeMap","_charCodeKeyCodeMap","_actionKeyCodeMap","keystroke","map","charCode","Object","prototype","hasOwnProperty","call","keystrokeForCharCode","parseInt","target","document","window","defaultView","Event","event","e","createEvent","initEvent","data","String","fromCharCode","charCodeForKeystroke","which","action","keystrokeForAction","dispatchEventsForKeystroke","currentModifierState","i","length","charCodeAt","dispatchModifierStateTransition","transitionModifiers","events","keydownEvent","createEventFromKeystroke","dispatchEvent","targetCanReceiveTextInput","keypressEvent","textinputEvent","inputEvent","keyupEvent","fromModifierState","toModifierState","didHaveMeta","willHaveMeta","didHaveCtrl","willHaveCtrl","didHaveShift","willHaveShift","didHaveAlt","willHaveAlt","includeKeyUp","includeKeyDown","Error","parts","split","lastPart","pop","forEach","part","toUpperCase","lastPartKeystroke","isEditable","US_ENGLISH_CHARCODE_KEYCODE_MAP","US_ENGLISH_ACTION_KEYCODE_MAP","US_ENGLISH"],"mappings":"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"}